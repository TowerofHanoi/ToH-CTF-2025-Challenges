The challenge starts with a file image.bin
Binwalk finds two elf files inside it (but the first will turn out to be a
spurious match, it's the kernel loader code that contains the string \x7fELF)
to verify the file type as it loads it...

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
92181         0x16815         ELF, 32-bit LSB no file type, (SYSV)
102592        0x190C0         ELF, 32-bit LSB executable, ARM, version 1 (SYSV)

A quick strings reveals it is a firmware image for a microcontroller, it
contains the kernel name and version, microcontroller part number, build date:

Miosix v2.81 (stm32h755zi_nucleo, Jul 14 2025 18:44:30, gcc 9.2.0-mp3.2)

The kernel mounts 4 filesystems, the strings it prints while it does so can
be seen in the image:

Mounting MountpointFs as / ...
Mounting DevFs as /dev ...
Mounting RomFs as /bin ...
Mounting %s as /sd ...

Of these, the interesting one is RomFs as it is mounted as /bin and is embedded
in the image itself, appended after the kernel. The RomFs image starts at offset
0x19040.

The filesystem contains a single file, flag_generator, at offset 0x190c0, that's
the one found by binwalk. Binwalk doesn't seem capable of extracting it, but
files in RomFs are not fragmented so it can be extracted easily.

This is an executable file for the Miosix OS, stripped and without section
header. It contains interestring strings such as:

flag_generator requires either 0 or 1 command line parameter
aeiou
toh{
flag.txt
flag_generator starting on stm32h755...
Your flag.txt is ready
/bin/flag_generator
basic_string::_S_create
basic_string::_S_construct null not valid
basic_string::append
Heap overflow
Pure virtual method called
Deleted virtual method called
Miosix

However, being without section header it's hard to disassemble:

$ arm-none-eabi-objdump -Dx flag_generator

flag_generator:     file format elf32-littlearm
flag_generator
architecture: armv3m, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x000000d3

Program Header:
    LOAD off    0x000000c0 vaddr 0x000000c0 paddr 0x000000c0 align 2**6
         filesz 0x00001bd4 memsz 0x00001bd4 flags r-x
    LOAD off    0x00001c98 vaddr 0x40000000 paddr 0x40000000 align 2**3
         filesz 0x00000520 memsz 0x00000710 flags rw-
 DYNAMIC off    0x00001cf8 vaddr 0x40000060 paddr 0x40000060 align 2**2
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
SYMBOL TABLE:
no symbols

A quick search online reveals the way to disassemple it anyway:
https://unix.stackexchange.com/questions/536163

For some reason it also incorrectly identifies the architecture as armv3m,
while the stm32h755 is a cortex-m7, thus an armv7-m, which after some online
search (https://answers.launchpad.net/gcc-arm-embedded/+question/242626):

$ arm-none-eabi-objdump -D -b binary -marm -Mforce-thumb flag_generator > disassembled.txt

produces a workable file.

Objdump identifies the start address as 0xd3, but bit 0 is set to 1 to mark
the instruction set is thumb2, so the first instruction is at 0xd2.
After some initialization, code jumps to main which is 0x10b4

int main()
{
    if(argc>2) func_0xd18();

    if(argc==1)
    {
        func_0x117e("/bin/flag_generator","Your flag.txt is ready"); // execve
        return 0;
    }

    func_0xcf0(); // print to stderr
    func_0xde0(); // string constructor
    func_0xf3c();
    func_0xd2c(); // string destructor
    func_0xcf0(); // print to stderr
    return 0;
}

Some of these functions are syscalls, as they write a number in r3 and then
execute the "svc 0" ARM instruction. Miosix syscalls numbers are different from
Linux, a list can be found online in miosix/kernel/process.h.
These are the only one that can be found in the binary:

    OPEN      = 2,  // func_0x111c()
    CLOSE     = 3,  // func_0x1128()
    READ      = 4,  // func_0x1134()
    WRITE     = 5,  // func_0x1140()
    LSEEK     = 6,  // func_0x114c()
    CHDIR     = 14, // func_0x1162()
    UNLINK    = 19, // func_0x116e()
    EXIT      = 43, // func_0x117a()
    EXECVE    = 44, // func_0x117e()

If the program is spawned with 0 arguments (argc==1) it performs an execve
relaunching itself with the added argument "Your flag.txt is ready", that
is later copied into a C++ string and passed to func_0xf3c()

The interesting function is void func_0xf3c(string *s).

This function first scans the passed string and writes all the found lowercase
vocals (aeiou) in a file "temp", then rewinds the file and for each
character it reads, it multiplies it by every character in the original string,
forming the flag string. After adding toh{ and }, this is written to the
flag.txt file.

The flag is toh{!nLLnwyUUMU2nx2EL?8mEXm_EtU2nx2E}
